{"version":3,"file":"2-snackbar.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["// Імпорт стилів iziToast\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// Імпорт JavaScript iziToast\nimport iziToast from 'izitoast';\n\n\n//Початкове повідомлення для користувача.Додано як випробовування.\niziToast.info({\n  title: 'Вітаємо!',\n  message: 'Система готова до роботи.',// текст оповіщення\n  position: 'topRight', // Позиція повідомлення\n  timeout: 5000, // Час автозакриття (в мс)\n  color: 'green', // Колір повідомлення\n});\n\n// Отримую доступ до елементів форми\nconst form = document.querySelector(\".form\");\n\n//Додаю обробник подій на відправку форми\nform.addEventListener(\"submit\", (event) => {\n  // Скасовую стандартеу поведінку браузера привідправці форми\n  event.preventDefault();\n\n  //Отримую данні з форми:затримку(змінна delayInput ) де час в мілісекундах, змінну (state) стану (fulfilled/rejected)\n  const delayInput = event.target.elements.delay.value;\n  const state = event.target.elements.state.value;\n\n  //Створюю змінну яка перетворює затримку з рядка на число, використовую метод parseInt\n  const delay = parseInt(delayInput, 10);\n\n  // Перевіряємо коректність затримки.Якщо затримка введена некоректно(не число або негативне число)буде виводитися помилка.Зроблено так що помилка виводиться в консолі і на екрані (використовуючи можливості бібліотеки)\n  if (isNaN(delay) || delay < 0) {\n    console.error(\n      '❌ Помилка: Введіть коректне значення затримки (позитивне число).'\n    );\n    iziToast.error({\n      title: '❌ Помилка',\n      message: 'Введіть коректне значення затримки (позитивне число).',\n      position: 'topRight',\n      timeout: 5000,\n    });\n    return;//зупиняємо подальше виконання \n  }\n\n  // Створюю проміс, який виконається через вказану затримку і результат залежить від обраного стану(fulfilled/rejected)\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (state === 'fulfilled') {\n        resolve(delay);\n      } else {\n        reject(delay);\n      }\n    }, delay);\n  });\n\n  // Обробляю результат промісу.Результат виводиться в консолі і на екрані(використовуючи можливості бібліотеки)\n  promise\n    .then(delay => {\n      console.log(`✅ Fulfilled promise in ${delay}ms`);\n      iziToast.success({\n        title: '✅ Успіх',\n        message: `Fulfilled promise in ${delay}ms`,\n        position: 'topRight',\n        timeout: 5000,\n      });\n    })\n    .catch(delay => {\n      console.log(`❌ Rejected promise in ${delay}ms`);\n      iziToast.error({\n        title: '❌ Помилка',\n        message: `Rejected promise in ${delay}ms`,\n        position: 'topRight',\n        timeout: 5000,\n      });\n    });\n  // Очищення форми після натискання кнопки\n  form.reset();\n});"],"names":["iziToast","form","event","delayInput","state","delay","resolve","reject"],"mappings":"wIAQAA,EAAS,KAAK,CACZ,MAAO,WACP,QAAS,4BACT,SAAU,WACV,QAAS,IACT,MAAO,OACT,CAAC,EAGD,MAAMC,EAAO,SAAS,cAAc,OAAO,EAG3CA,EAAK,iBAAiB,SAAWC,GAAU,CAEzCA,EAAM,eAAc,EAGpB,MAAMC,EAAaD,EAAM,OAAO,SAAS,MAAM,MACzCE,EAAQF,EAAM,OAAO,SAAS,MAAM,MAGpCG,EAAQ,SAASF,EAAY,EAAE,EAGrC,GAAI,MAAME,CAAK,GAAKA,EAAQ,EAAG,CAC7B,QAAQ,MACN,kEACN,EACIL,EAAS,MAAM,CACb,MAAO,YACP,QAAS,wDACT,SAAU,WACV,QAAS,GACf,CAAK,EACD,MACD,CAGe,IAAI,QAAQ,CAACM,EAASC,IAAW,CAC/C,WAAW,IAAM,CACXH,IAAU,YACZE,EAAQD,CAAK,EAEbE,EAAOF,CAAK,CAEf,EAAEA,CAAK,CACZ,CAAG,EAIE,KAAKA,GAAS,CACb,QAAQ,IAAI,0BAA0BA,CAAK,IAAI,EAC/CL,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,wBAAwBK,CAAK,KACtC,SAAU,WACV,QAAS,GACjB,CAAO,CACP,CAAK,EACA,MAAMA,GAAS,CACd,QAAQ,IAAI,yBAAyBA,CAAK,IAAI,EAC9CL,EAAS,MAAM,CACb,MAAO,YACP,QAAS,uBAAuBK,CAAK,KACrC,SAAU,WACV,QAAS,GACjB,CAAO,CACP,CAAK,EAEHJ,EAAK,MAAK,CACZ,CAAC"}